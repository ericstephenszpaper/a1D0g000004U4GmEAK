<!--
// Name: Index Page
// Committer: marty.harvey@zpaper.com
// Update: MSH181008 since we changed the doc context, change it back
-->
<script>
//--- RULE JSON REPRESENTATION ---
var ruleJson = {"type":"rool","updated":"2018-10-08 20:18:25","active":true,"button":"Save","name":"Index Page","conditions":{"logic":"and","arguments":[{"name":"doc.X(\"X_buttonAction\")","value":"Save","operation":"equals"}]},"consequence":{"doit":""},"ordinal":7}

//--- RULE JSON REPRESENTATION - END ---

//--- RULE CONSEQUENCE CODE ---
/* BEGIN Index Page */
alert("@@@@ Index Rule Fired @@@#");
//MSH180924 #52440 populate groupID, imageIds, and zNativeFileName on child stack
function findMatchingImageIds(aPageRange, parentImageIdsArr) {
    var rtn = "";
    var pageRange = aPageRange;
    var pages = pageRange.split(",");
    if (pages.length > 1) {
        alert("pages.length > 1");
        for (var m = 0; m < pages.length; m++) {
            if (0 === rtn.length) {
                rtn = parentImageIdsArr[pages[m] - 1];
            } else {
                rtn += "," + parentImageIdsArr[pages[m] - 1];
            }
        }
    } else {
        rtn = parentImageIdsArr[pages[0] - 1];
    }
    return rtn;
}

//MSH180925 #52440 moved here from below so it's available
var pageRange = X(doc, "X_idxPages");
var groupID = X(doc, "GroupID");
var imageIDs = X(doc, "ImageIDs");

alert("#### full list of ImageIDs from parent stack: " + imageIDs);
var nativeFileName = X(doc, "zNativeFileName");
var imagesForThisStack = null;
if (imageIDs) {
    var imageIdsArr = imageIDs.split(",");
    alert("### parent images array = " + imageIdsArr);
    imagesForThisStack = findMatchingImageIds(pageRange, imageIdsArr);
}
//MSH181003 keep the array format correct
if (!imagesForThisStack) {
    imagesForThisStack = "";
}
alert("#### images for this stack = " + imagesForThisStack);
//MSH180924 #52440 END

function setDocSetStatus(aDoc, anArrOfPairs) {
    var ba = X(aDoc, "X_buttonAction") + "ed";
    ba = ba.substring(1 + ba.lastIndexOf(" "));
    var now0 = getCurDateAndTime(aDoc, false, true);
    anArrOfPairs.push("X_reviewedStatus", ba);
    anArrOfPairs.push("X_reviews", X(aDoc, "X_reviews") + ba + " by " + aDoc.kbData.remoteUser + " at " + now0 + "<br/>"); //ERS170909 #40592
    anArrOfPairs.push("X_buttonAction", "");
}
/* double-quote, newline characters */
var dq = String.fromCharCode(34);
//MSH180924 unused var nl = String.fromCharCode(10);
var formatNow = getCurDateAndTime(doc);
var stackId = X(doc, "X_stack");
var stackFolder = stackId + "-STACK";
var companyCode = doc.deliveredTo;
var tiffSfId = "";
var parentFolder = X(doc, "X_curFolder");
var parentdbID = doc.dbID; //JPB180606 added doc.dbID

/* Clear the trigger that invoked this rule */
//ERS170909 zData.clearTriggerCondition(doc,"X_buttonAction");
var indexInitialized = X(doc, "X_indexInitialized");
if (!indexInitialized || 0 === indexInitialized.length) {
    stackId = new Date().getTime() + "";
    stackFolder = stackId + "-STACK";
    zData.initializeStack(doc, stackFolder, companyCode, stackId);
}

// Does the user want to attach indexed pages to Case?
//var sfStackId = X(doc, "X_sfStackId");
var parentSfStackId = X(doc, "X_sfStackId");
var caseId = X(doc, "X_ZPAPER__Case__c");
var contactId = X(doc, "X_ZPAPER__Patient__c");
//MSH180924 unused var patientId = contactId; //TODO
var providerId = X(doc, "X_ZPAPER__Provider__c");
var patientFirstName = X(doc, "X_ZPAPER__FirstName__c");
var patientLastName = X(doc, "X_ZPAPER__LastName__c");
var patientDOB = X(doc, "X_ZPAPER__Birthdate__c");
var patientName = X(doc, "X_ZPAPER__Patient__r.Name");
var docType = X(doc, "X_ZPAPER__faxType__c");
//MSH181004 var zType = doc.X("X_docType");
var zType = X(doc, "X_docType");
//MSH180924 unused var nowDate = getCurDate(doc);
var caseRecordType = X(doc, "X_Case_Record_Type__c");
//MSH180924 unused var docTypeLabel = X(doc, "X_ZPAPER__faxTypeLabel");
var userClassification = X(doc, "X_ZPAPER__Classification__c");

//MSH180924 let's check the value before we try to use it; moved here from below
if (parentSfStackId === "") { //ERS170731 #40593
    alert("@@@@@@ parentSfStackId is empty. Attempting X_attachedTo");
    //MSH180924 does nothing; perhaps this? X(doc, "X_attachedTo");
    parentSfStackId = X(doc, "X_attachedTo");
    if (parentSfStackId.lastIndexOf("/") >= 0) {
        parentSfStackId = parentSfStackId.substring(parentSfStackId.lastIndexOf("/") + 1);
        if (parentSfStackId.indexOf(",") >= 0) {
            parentSfStackId = parentSfStackId.substring(0, parentSfStackId.indexOf(","));
        }
    }
}
alert("@@@@@@ parentSfStackId = " + parentSfStackId);
//alert("@@@@ parent stack id = " + sfStackId);
var parentStackNumber = getSFField(doc, "ZPAPER__zStack__c", "Name", null, parentSfStackId);
alert("#### Our parent stack number is " + parentStackNumber);
var zParentRecord = getSFFields(doc, "ZPAPER__zStack__c", "Name,ZPAPER__latestFax__c,ZPAPER__Classification__c,ZPAPER__Priority__c", null, parentSfStackId);
//MSH180924 unused var zStackClassification = X(doc, "ZPAPER__Classification__c", zParentRecord);
alert("@@@@@@ zParentRecord  " + zParentRecord);

var sfUserId = getSFRecordID(doc, "User", {"Username": doc.sfUserName});

//var zStackName = X(doc, "Name", zParentRecord);
var receivedAt = X(doc, "ZPAPER__latestFax__c", zParentRecord);

// Get the document type (will be used to route to next folder)
var nextFolder = "20500Triage-S2"; // Other folder is the default
var prevIndexPages = X(doc, "X_indexedPages");
var curIndexPages = X(doc, "X_idxPages");
if (prevIndexPages && prevIndexPages.length > 0 && curIndexPages && curIndexPages.length > 0) {
    prevIndexPages += ",";
}
curIndexPages = prevIndexPages + curIndexPages;
var arrOfPairs = [];
arrOfPairs.push("X_indexedPages", curIndexPages);
if (1 === 1) { //ERS170909 #40592 for zDocSet statuses
    //MSH180924 use X(doc, "nnnnnnn") instead var ba = doc.X("X_buttonAction")+"ed";
    /* MSH180924 moved to function above
     var ba = X(doc, "X_buttonAction") + "ed";
     ba = ba.substring(1 + ba.lastIndexOf(" "));
     var now0 = getCurDateAndTime(doc, false, true);
     arrOfPairs.push("X_reviewedStatus", ba);
     arrOfPairs.push("X_reviews", X(doc, "X_reviews") + ba + " by " + doc.kbData.remoteUser + " at " + now0 + "<br/>"); //ERS170909 #40592
     arrOfPairs.push("X_buttonAction", "");
     */
    setDocSetStatus(doc, arrOfPairs);
}
updateDB(doc, arrOfPairs);

var attachPath = X(doc, "X_attachedTo");
alert("@@@@@@ Currently attached to ZPAPER__zStack__c with ID: " + parentSfStackId);

/* SPLIT OFF NEW SNIPPET HERE */
var orgDocId = doc.dbID;
var response = splitDocumentForIndex(doc, "index", pageRange);
alert("splitDocumentForIndex response = " + response);
alert("Case '" + caseId + "' and len = " + caseId.length);

var childDocId = doc.dbID
alert("childDocId = " + childDocId);

//*
/* AFTER THIS POINT, THE DOC WILL HOLD DATA FOR NEW SNIPPET, NOT THE STACK SNIPPET */
//*

/*
 1. update original zStack
 2. ? unlockDocument
 3. ? moveDocument
 4. track
 5. createAndAttach child stack
 6. updateDB
 7. ? moveDocument
 */

/* 1. update original zStack */
//MSH181003 this should be done in Stack Complete, not here
//arrOfPairs = [];
var zp = "ZPAPER__"; //ERS170626 now in the package
var zStack = zp + "zStack__c"; //"Stack__c"
//arrOfPairs.push(zp + "Status__c", "Completed");
//updateSFRecord(doc, "ZPAPER__zStack__c", sfStackId, arrOfPairs);

/*
 2. ? unlockDocument
 3. ? moveDocument
 */
unlockDocument(doc);
moveDocument(doc, null, parentFolder);


/* 4. track */
var pageCount = zData.countPages(doc, pageRange);
track(doc, "Doc Indexed ", "Document with Id: " + doc.dbID, pageCount);
addPostExecutionScript(doc, "nextPage(~ready~);updateDEStatus(~indexed:" + pageRange + "~);");


/* 5. createAndAttach child stack */
arrOfPairs = [];
arrOfPairs.push(zp + "faxType__c", zType);
arrOfPairs.push(zp + "Priority__c", "Medium");
arrOfPairs.push(zp + "Status__c", "New Stack");
arrOfPairs.push(zp + "Channel__c", "Fax");
arrOfPairs.push(zp + "latestFax__c", formatNow);
arrOfPairs.push(zp + "receivedId__c", doc.dbID);
arrOfPairs.push(zp + "newFax__c", "true");
arrOfPairs.push(zp + "Pages__c", pageCount);
arrOfPairs.push("Group_ID__c", groupID);
arrOfPairs.push("Image_IDs__c", imagesForThisStack);
arrOfPairs.push("ZPAPER_zNativeFileName__c", nativeFileName);
if (zData.ownerId) {
    arrOfPairs.push("OwnerId", zData.ownerId);
}
if (zData.programName) {
    arrOfPairs.push(zp + "Program_Name__c", zData.programName);
}
arrOfPairs.push(zp + "sentFaxTo__c", doc.deliveredTo); //ERS170628 caller id
arrOfPairs.push(zp + "From__c", doc.deliveredFrom);
arrOfPairs.push(zp + "Stage__c", "Received"); //ERS170731 #40593
if (zData.programId) {
    arrOfPairs.push("ZPAPER_Program__c", zData.programId);
}
if (zData.classification) {
    arrOfPairs.push(zp + "Classification__c", zData.classification);
}
arrOfPairs.push("ZPAPER__Parent__c", parentSfStackId);

var childStackSFId = createAndAttach(doc, zStack, "zStack split on " + formatNow, arrOfPairs) + "";
alert("#### Stack Received. Attached to: " + childStackSFId);
var childStackNumber = getSFField(doc, zStack, "Name", null, childStackSFId);
//building attachment name PatientName+"-Stack#"+zStackName+"-"+docType+"-"+formatNow
var attachmentName = "";
if (patientName) {
    attachmentName += patientName + "-";
} else {
    attachmentName += patientFirstName + " " + patientLastName + "-";
}
attachmentName += "Stack#" + childStackNumber.replace(/^0+/, "") + "-" + docType + "-" + formatNow;

/* Attach the split document to a new Case record, if it wasn't passed in */
var priority = X(doc, "X_ZPAPER__Priority__c"); //ERS170626
//MSH180924 unused var label0="";
//MSH180924 unused var triageType=doc.docType;

/* Attach the split document to Contact record if required */
alert("@@@@ attaching to a Contact? contactId = " + contactId);
if (contactId && contactId.length > 0) {
    if (docType && docType.length > 0 && "POA" === docType) {
        attach(doc, attachmentName, contactId);
        if (attachPath.indexOf(contactId) == -1) {
            attachPath += "," + contactId;
        }
        tiffSfId = contactId;
    }
    var contactFlds = getSFFields(doc, "Contact", "FirstName,LastName", null, contactId);
    patientFirstName = X(doc, "FirstName", contactFlds);
    patientLastName = X(doc, "LastName", contactFlds);
} else if (patientFirstName && patientFirstName.length > 0 && patientLastName && patientLastName.length > 0 && patientDOB && patientDOB.length > 0) {
    /* Create new contact */
    var ctcArrOfPairs = [];
    ctcArrOfPairs.push("FirstName", patientFirstName);
    ctcArrOfPairs.push("LastName", patientLastName);
    ctcArrOfPairs.push("Birthdate", patientDOB);
    ctcArrOfPairs.push("OwnerId", sfUserId);
    if (zData.programId) {
        ctcArrOfPairs.push("Programref__c", zData.programId);
    }
    /* attach document to contact if docTpye is POA */
    if (docType && docType.length > 0 && "POA" === docType) {
        contactId = createAndAttach(doc, "Contact", attachmentName, ctcArrOfPairs);
        if (attachPath.indexOf(contactId) == -1) {
            attachPath += "," + contactId;
        }
        tiffSfId = contactId;
    } else {
        /* else only create contact */
        contactId = createSFRecord(doc, "Contact", attachmentName, ctcArrOfPairs);
    }

    //alert("@@@@@@@ DOCS PARAMS : " + doc.toString());
    alert("@@@@@@@ NEW CONTACT PARAMS: " + ctcArrOfPairs);
    alert("@@@@@@@ NEW CONTACT CREATED WITH ID: " + contactId);
    if (contactId != "NEW") {
        // clear out the "New Patient" fields
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__FirstName__c" + dq + ").val(" + dq + "" + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__LastName__c" + dq + ").val(" + dq + "" + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c" + dq + ").val(" + dq + "" + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Birthdate__c_readable" + dq + ").val(" + dq + "NONE" + dq + "); ");
        // set the Patient lookup fields
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c" + dq + ").val(" + dq + contactId + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Patient__c_Name" + dq + ").val(" + dq + patientFirstName + " " + patientLastName + dq + "); ");
    }
}
alert("userClassification = " + userClassification);
alert("zData.skipCaseTypeId = " + zData.skipCaseTypeId);
//alert("zData.skipCaseTypeId" + zData.skipCaseTypeId.indexOf(caseRecordType));

//lets create new case if caseId is empty
if (((!caseId || 0 === caseId.length) && "POA" != docType) && !(userClassification == "Cosentyx" && zData.skipCaseTypeId && zData.skipCaseTypeId.indexOf(caseRecordType) >= 0)) {
    alert("@@@@ creating new Case");
    arrOfPairs = [];
    //ERS170520 arrOfPairs.push("OwnerId", queuesMapKludge[X(doc, "X_Assign_to_Queue__c")]);
    arrOfPairs.push("ContactId", contactId);
    arrOfPairs.push("ZPAPER__newFax__c", "true"); //JPB 170512 added these workflow fields
    arrOfPairs.push("Received_Date__c", receivedAt);  //JPB 170512 added these workflow fields
    arrOfPairs.push("ZPAPER__receivedId__c", doc.dbID); //JPB 170512 added these workflow fields
    arrOfPairs.push("Status", X(doc, "X_Status"));
    arrOfPairs.push("OwnerId", sfUserId);
    arrOfPairs.push("RecordTypeId", caseRecordType);
    if (zData.programId) {
        arrOfPairs.push("Program__c", zData.programId);
    }
    arrOfPairs.push("Source__c", zData.sourceName);
    //MSH180408 arrOfPairs.push("Primary_Product__c", zData.productId);
    if (zData.productId) {
        arrOfPairs.push("Primary_Product__c", zData.productId);
    }
    //arrOfPairs.push("Type", "New Fax"); //JPB 170512 added these workflow fields//KPS 171109 commented out per Case#43497
    if (1 == 1) { //ERS170523 #37162 after dryrun
        //arrOfPairs.push("RecordTypeId","012Q00000005Ahj"); //ERS170523 Prior Auth
        if (priority != "Normal") {
            arrOfPairs.push("Priority", priority);  //ERS170524 #37162 priority on Case
        } else {
            arrOfPairs.push("Priority", "Medium");
        }
        arrOfPairs.push("Origin", "Fax");
    }
    alert("arrOfPairs Case ************: " + arrOfPairs);
    //var caseId = createAndAttach(doc, "Case", attachmentName, arrOfPairs);
    if (!docType || (docType && docType.length > 0 && "POA" != docType)) {
        caseId = createAndAttach(doc, "Case", attachmentName, arrOfPairs);
        if (attachPath.indexOf(caseId) == -1) {
            attachPath += "," + caseId;
        }
        tiffSfId = caseId;
    } else {
        caseId = createSFRecord(doc, "Case", attachmentName, arrOfPairs);
    }
    //if case get created successfully then let's update lookup field in triage form
    if (caseId != "NEW") {
        var caseFlds = getSFFields(doc, "Case", "CaseNumber", null, caseId);
        var caseNumber = X(doc, "CaseNumber", caseFlds);
        //lets update case lookup details here
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c" + dq + ").val(" + dq + caseId + dq + "); ");
        addPostExecutionScript(doc, " $(" + dq + "#ZPAPER__Case__c_CaseNumber" + dq + ").val(" + dq + caseNumber + dq + "); ");
        //Case redirection here
        //MSH180408 Case record, not Patient record
        addPostExecutionScript(doc, ";if(confirm('View newly-created Case Record')){ location.href='" + doc.sfServer + "/apex/IntakePage?id=" + caseId + "'}");
    }
    alert("Created Case with ID: " + caseId);
    if (caseId == "null" || caseId == "NEW") {
        caseId = null; //ERS170621 TODO need a standard
    }
} else {
    //attach document to existing case if docType not equals POA
    if (docType && docType.length > 0 && "POA" != docType) {
        alert("@@@@ attaching to existing Case: " + caseId);
        attach(doc, attachmentName, caseId);
        if (attachPath.indexOf(caseId) == -1) {
            attachPath += "," + caseId;
        }
        tiffSfId = caseId;
    }
}

// lets create tiff image for pdf here
alert("### tiff flag ### = " + zData.generateTiff);
alert("### pageRange ### = " + pageRange);
attach(doc, attachmentName, parentSfStackId);
if (zData.generateTiff) {
    setDocumentContext(doc, orgDocId);
    /* MSH180130 #44986 create and attach tif */
    /* Attach file in addition to envelope */
    var nowTimeStamp = new Date().getTime() + "";
    //found in /zpdata/conf/workflow.props
    //a directory in which to do the work
    //integrationDir=/zpdata/agents/mck/integration/
    createDirectory(doc, zData.uploadDir, nowTimeStamp);
    //MSH181004 unused var stackName = getSFField(doc, "ZPAPER__zStack__c", "Name", "", sfStackId);
    //MSH180924 unused var fileName = getCurDate(doc) + " Stack " + stackName + " New "+zData.programName+" Fax.pdf";

    //Page Range can contain non-numeric characters from Page Rotation eg:### pageRange ###1u,2,8,7,6,5,4,3
    //make sure page range array is cleared of all non-numeric chars
    //MSH180924 don't need min & max, just strip out alpha chars.
    //      parsing is handled downstream in com.knowledgebin.Utils public static Collection<Integer> parsePages(String pages)
    //var maxPage = Math.max.apply(Math, pageRange.split(','));
    //var minPage = Math.min.apply(Math, pageRange.split(','));
    //alert("### All min max ###" + minPage + "-" + maxPage);
    //alert("@@@@@ Calling split, pages = " + minPage + "-" + maxPage + ", nowTimeStamp = " + nowTimeStamp);

    //regex: find all alpha chars ([a-z]), globally (g), and case-insensitive (i)
    var noAlphaPages = pageRange.replace(/[a-z]/gi, "");
    alert("@@@@@ Calling split, pages = " + noAlphaPages + ", nowTimeStamp = " + nowTimeStamp);

    //MSH180924 #52440 var response = splitPDF(doc, minPage + "-" + maxPage, zData.uploadDir, nowTimeStamp, doc.dbID);
    var response = splitPDF(doc, noAlphaPages, zData.uploadDir, nowTimeStamp, doc.dbID);
    alert("@@@@ response from splitPDF = " + response);
    var newPDFName = X(doc, "newPDF", response);
    alert("@@@@ split PDF FileName = " + newPDFName);
    var newTIFFName = pdf2tiff(doc, newPDFName);
    alert("@@@@ pdf2tiff FileName = " + newTIFFName);
    var label = attachmentName + ".tif";
    if (newTIFFName.indexOf("ERROR") !== 0) {
        var uploadURL = "http://localhost:8080/myfileforce/uploadToCloud.jsp?SFid=NEW&SFpid=" + tiffSfId + "&SForg=" + doc.sfOrg + "&label=" + label + "&serverFile=" + newTIFFName + "&Description=File attached by zPaper.";
        alert("#### Upload native PDF with " + uploadURL);
        var r = wget(doc, uploadURL);
        alert("#### tiff created and attached to: " + caseId);
        cleanupDirectory(doc, zData.uploadDir, nowTimeStamp);
        /* Finally, delete the work folder and all contents. */
        //MSH170222 ERS wants to keep cleanupDirectory(doc, "integrationDir", nowTimeStamp);
    }
    //MSH181008 since we changed the doc context, change it back
    setDocumentContext(doc, childDocId);
}

//lets update zStack record with patient and case details
arrOfPairs = [];
if (providerId && providerId.length > 0) {
    arrOfPairs.push("ZPAPER__Provider__c", providerId);
    if (attachPath.indexOf(providerId) == -1) {
        attachPath += "," + providerId;
    }
}
if (contactId && contactId.length > 0) {
    arrOfPairs.push("ZPAPER__Patient__c", contactId);
    if (attachPath.indexOf(contactId) == -1) {
        attachPath += "," + contactId;
    }
}
if (caseId && caseId.length > 0) {
    arrOfPairs.push("ZPAPER__Case__c", caseId);
}
if (patientFirstName && patientFirstName.length > 0) {
    arrOfPairs.push("ZPAPER__FirstName__c", patientFirstName);
}
if (patientLastName && patientLastName.length > 0) {
    arrOfPairs.push("ZPAPER__LastName__c", patientLastName);
}
if (patientDOB && patientDOB.length > 0) {
    arrOfPairs.push("ZPAPER__Birthdate__c", patientDOB);
}
if (docType && docType.length > 0) {
    arrOfPairs.push("ZPAPER__faxType__c", docType);
}
//MSH180924 #52440 populate groupID, imageIds, and zNativeFileName on child stack
if (groupID) {
    arrOfPairs.push("Group_ID__c", groupID);
}
if (nativeFileName) {
    arrOfPairs.push("ZPAPER_zNativeFileName__c", nativeFileName);
}
if (imagesForThisStack) {
    arrOfPairs.push("Image_IDs__c", imagesForThisStack);
}
//MSH180924 #52440 END

alert("@@@@ Before update stack record arrOfPairs === " + arrOfPairs);
alert("@@@@ update stack record childStackSFId === " + childStackSFId);
updateSFRecord(doc, "ZPAPER__zStack__c", childStackSFId, arrOfPairs);
//attach(doc, attachmentName, sfStackId);
//alert("@@@@ updated zStack Record, id = " + childStackSFId);

if (1 === 0) { //ERS170627 TODO refactor
    //CRN170208 If we have a Contact and the user sent a Provider, add the provider to the Contact.
    var provider = X(doc, "X_Primary_Care_Physician__c");
    if (contactId && contactId.length > 0 && provider && provider.length > 0) {
        arrOfPairs = [];
        arrOfPairs.push("Primary_Care_Physician__c", provider);
        updateSFRecord(doc, "Contact", contactId, arrOfPairs);
    }
}

/* Move the split document to its processing folder */
alert("@@@@@@ Moving the indexed pages document into next processing folder: " + nextFolder);
//moveDocument(doc,"",nextFolder);
//reloadByBATES(doc, nextFolder); //ERS170413 #35291
/* Place the split document into the stack folder */
alert("@@@@@@ Moving the indexed pages document into the final stack folder: " + stackFolder);
//moveDocument(doc,"",stackFolder);
parentFolder = doc.kbData.groupID.substring(1) + "In";
moveDocument(doc, doc.userID + "In", parentFolder);
unlockDocument(doc);


/* 6. updateDB */

arrOfPairs = [];
//MSH181008 debugging
alert("@@@@ child doc.dbID = " + doc.dbID);
alert("@@@@ parent doc.dbID = " + parentdbID);
//ERS170909 arrOfPairs.push("X_reviewedStatus", "Indexed");
if (1 === 1) { //ERS170909 #40592 for zDocSet statuses
    //MSH180924 use X(doc, "nnnnnnn") instead var ba = doc.X("X_buttonAction")+"ed";
    /* MSH180924 moved to function above
     var ba = X(doc, "X_buttonAction") + "ed";
     ba = ba.substring(1 + ba.lastIndexOf(" "));
     var now0 = getCurDateAndTime(doc, false, true);
     arrOfPairs.push("X_reviewedStatus", ba);
     arrOfPairs.push("X_reviews", X(doc, "X_reviews") + ba + " by " + doc.kbData.remoteUser + " at " + now0 + "<br/>"); //ERS170909 #40592
     arrOfPairs.push("X_buttonAction", "");
     */
    setDocSetStatus(doc, arrOfPairs);
}
/* CRN160825 Set the page count so that it does not have the parent page count */
pageCount = zData.countPages(doc, pageRange);
alert("@@@@ pageCount = " + pageCount);
arrOfPairs.push("X_pages", pageCount);
arrOfPairs.push("db-pages", pageCount);
arrOfPairs.push("db-label", patientFirstName + patientLastName + " - " + companyCode + " - " + childStackSFId);
arrOfPairs.push("db-BATES", childStackSFId + "-STACK");
arrOfPairs.push("X_sfStackId", childStackSFId);
//CRN180618 Make sure that the latest attachment is first in the list because files.jspf uses that first one to pull pre-pop data.
attachPath = X(doc, "X_attachedTo");
var attachIds = attachPath.substring(attachPath.lastIndexOf("/") + 1);
attachIds = attachIds.split(",");
var buffer = childStackSFId + "";
for (var idx in attachIds) {
    if (attachIds.hasOwnProperty(idx)) {
        var attachId = attachIds[idx];
        if (attachId !== childStackSFId) {
            buffer += "," + attachId;
        }
    }
}
attachPath = attachPath.substring(0, attachPath.lastIndexOf("/") + 1) + buffer;
alert("@@@ new X_attachedTo = " + attachPath);
arrOfPairs.push("X_attachedTo", attachPath);

if (!patientFirstName || 0 == patientFirstName.length) {
    patientFirstName = "Unknown";
}
if (!patientLastName || 0 == patientLastName.length) {
    patientLastName = "Name";
}
arrOfPairs.push("db-label", patientFirstName + patientLastName + " - " + companyCode + " - " + childStackSFId);
updateDB(doc, arrOfPairs);

track(doc, "Doc Indexed ", "Document with Id: " + doc.dbID, pageCount);
addPostExecutionScript(doc, "nextPage(~ready~);updateDEStatus(~indexed:" + pageRange + "~);");
/* END Index Page */

//--- RULE CONSEQUENCE CODE - END ---

//--- RULE VALIDATION CODE ---
ZnVuY3Rpb24gekluc3RhbGwoKSB7IC8vRVJTMTcwNzIyIHNldCBvbiB0aGUgaW1wb3J0CiAgICAkKCJbbmFtZT0nZGItQkFURVMnXSIpLnZhbCgiIik7CiAgICAkKCIjWF9idXR0b25BY3Rpb25zIikudmFsKCJJbmRleCxJZ25vcmUsUmVqZWN0LFN0YWNrIENvbXBsZXRlIik7CiAgICAkKCIjWF9mb2xkZXJGb3JtcyIpLnZhbCgiMjAyMDAyMDE3MTEyNTA5MTExNV9EYXRhMl9XZWJfRm9ybSIpOwp9IC8vRVJTMTcwNzIyIGVuZCBvZiBmdW5jdGlvbgoKZnVuY3Rpb24gZG9WYWxpZGF0aW9uKCkgewogICAgLy9DUk4xNzA3MTkgRHJ1ZyBuYW1lIGlzIHJlcXVpcmVkCiAgICAvL0VSUzE3MDcxOSBtb3JlIGZpZWxkcyBmcm9tIEtlbgogICAgdmFyIGNhc2VJZCA9ICQoJ1tuYW1lPSJYX0Nhc2VfX2MiXScpLnZhbCgpOwogICAgCiAgICAKICAgIHZhciByZXFCdWZmZXIgPSAiIjsKICAgIHZhciBwYXR0ZXJuU3RyaW5nID0gL15bYS16QS1aIF0rJC87CiAgICBuPSJYX1pQQVBFUl9fZmF4VHlwZV9fYyI7IGw9IkRvY3VtZW50IFR5cGUiOwogICAgZT0kKCdbbmFtZT0iJytuKyciXScpOwogICAgdmFyIGRvY1R5cGUgPSBlLnZhbCgpOwogICAvLyBfekRhdGEuZG9jVHlwZUxhYmVsID0gJChlKS5maW5kKCJvcHRpb246c2VsZWN0ZWQiKS50ZXh0KCk7CiAgICAvL2FsZXJ0KCBfekRhdGEuZG9jVHlwZUxhYmVsKTsKICAgCi8vdmFsaWRhdGUgZG9jVHlwZSBoZXJlCiAgICBpZiAoIWUudmFsKCkgfHwgMCA9PT0gZS52YWwoKS5sZW5ndGggfHwgIkRPTk9UX1NBVkUiID09PSBlLnZhbCgpKSB7CiAgICAgICAgZS5jc3MoJ2JvcmRlcicsJzNweCBzb2xpZCByZWQnKTsKICAgICAgICBpZiAocmVxQnVmZmVyLmxlbmd0aCA+IDApIHsgcmVxQnVmZmVyICs9ICIsICI7IH0KICAgICAgICByZXFCdWZmZXIgKz0gbDsKICAgIH0gZWxzZXsKICAgICAgICBlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIGdyZWVuJyk7CiAgICAgICAgdmFyIGRvY1R5cGVMYWJlbD0gJChlKS5maW5kKCJvcHRpb246c2VsZWN0ZWQiKS50ZXh0KCk7CiAgICAgICAgdmFyIGRvY1R5cGVMYWJlbERvbSA9ICQoJ1tuYW1lPSJYX1pQQVBFUl9fZmF4VHlwZUxhYmVsIl0nKTsKICAgICAgICAKICAgICAgICBpZighZG9jVHlwZUxhYmVsRG9tLnZhbCgpIHx8IDAgPT09IGRvY1R5cGVMYWJlbERvbS52YWwoKS5sZW5ndGgpewogICAgICAgICAgIAogICAgICAgICAgICAkKCdmb3JtI2RhdGFFbnRyeUZvcm0nKS5hcHBlbmQoJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlhfWlBBUEVSX19mYXhUeXBlTGFiZWwiIGlkPSJYX1pQQVBFUl9fZmF4VHlwZUxhYmVsIiB2YWx1ZT0iJytkb2NUeXBlTGFiZWwrJyIvPicpOwoKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgCiAgICAgICAgICAgICQoZG9jVHlwZUxhYmVsRG9tKS52YWwoZG9jVHlwZUxhYmVsKTsKICAgICAgICB9CiAgICAgICAgCiAgICB9IAogICAgCiAgCiAgICAvL3ZhbGlkYXRlIHBhdGllbnQgaGVyZSAsaWYgcGF0aWVudElkIGlzIGVtcHR5ICB0aGVuIGZpcnN0TmFtZSxsYXN0TmFtZSxCaXJ0aERhdGUgbWFuZGF0b3J5IGFuZCBmaXJzdE5hbWUgYW5kIGxhc3ROYW1lIHNob3VsZCBiZSBzdHJpbmcKICAgIHZhciBwYXRpZW50SWQ9JCgnW25hbWU9IlhfWlBBUEVSX19QYXRpZW50X19yLk5hbWUiXScpLnZhbCgpOwogICAgaWYoIXBhdGllbnRJZCB8fCAwID09PSBwYXRpZW50SWQubGVuZ3RoKXsKICAgICAgICB2YXIgcGFpdGVudERlID0gJCgnW25hbWU9IlhfWlBBUEVSX19GaXJzdE5hbWVfX2MiXScpOwogICAgICAgIAogICAgICAgICBpZighcGFpdGVudERlLnZhbCgpIHx8IDAgPT09IHBhaXRlbnREZS52YWwoKS5sZW5ndGgpewogICAgICAgICAgICBwYWl0ZW50RGUuY3NzKCdib3JkZXInLCczcHggc29saWQgcmVkJyk7CiAgICAgICAgICAgIHJlcUJ1ZmZlciArPSAiLEZpcnN0TmFtZSI7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGlmKCEocGFpdGVudERlLnZhbCgpLm1hdGNoKHBhdHRlcm5TdHJpbmcpKSl7CiAgICAgICAgICAgICAgICAgYWxlcnQoIkVSUk9SOiAgJ0ZpcnN0TmFtZScgTXVzdCBiZSBTdHJpbmcuIik7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICBwYWl0ZW50RGUuY3NzKCdib3JkZXInLCczcHggc29saWQgZ3JlZW4nKTsgCiAgICAgICAgfSAKCiAgICAgICAgIHBhaXRlbnREZSAgPSAkKCdbbmFtZT0iWF9aUEFQRVJfX0xhc3ROYW1lX19jIl0nKTsKICAgICAgICAgaWYoIXBhaXRlbnREZS52YWwoKSB8fCAwID09PSBwYWl0ZW50RGUudmFsKCkubGVuZ3RoKXsKICAgICAgICAgICAgcGFpdGVudERlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIHJlZCcpOwogICAgICAgICAgICByZXFCdWZmZXIgKz0gIixMYXN0TmFtZSI7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGlmKCEocGFpdGVudERlLnZhbCgpLm1hdGNoKHBhdHRlcm5TdHJpbmcpKSl7CiAgICAgICAgICAgICAgICBhbGVydCgiRVJST1I6ICAnTGFzdE5hbWUnIE11c3QgYmUgU3RyaW5nLiIpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhaXRlbnREZS5jc3MoJ2JvcmRlcicsJzNweCBzb2xpZCBncmVlbicpOwogICAgICAgIH0gCgogICAgICAgIHBhaXRlbnREZSA9ICQoJ1tuYW1lPSJYX1pQQVBFUl9fQmlydGhkYXRlX19jIl0nKTsKICAgICAgICAgaWYoIXBhaXRlbnREZS52YWwoKSB8fCAwID09PSBwYWl0ZW50RGUudmFsKCkubGVuZ3RoKXsKICAgICAgICAgICAgcGFpdGVudERlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIHJlZCcpOwogICAgICAgICAgICQoIiNaUEFQRVJfX0JpcnRoZGF0ZV9fY19yZWFkYWJsZSIpLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIHJlZCcpOyAKICAgICAgICAgICAgcmVxQnVmZmVyICs9ICIsQmlydGhkYXRlIjsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgcGFpdGVudERlLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIGdyZWVuJyk7CiAgICAgICAgICAgICQoIiNaUEFQRVJfX0JpcnRoZGF0ZV9fY19yZWFkYWJsZSIpLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIGdyZWVuJyk7CiAgICAgICAgfSAKCgogICAgfQovL3ZsYWlkYXRlIGNhc2VJZCAsaWYgY2FzZUlkIGlzIGVtcHR5IHRoZW4gbWFrZSBjYXNlUmVjb3JkVHlwZSBpcyBtYW5kYXRvcnkgCiAgICBjYXNlSWQ9JCgnW25hbWU9IlhfWlBBUEVSX19DYXNlX19yLkNhc2VOdW1iZXIiXScpLnZhbCgpOwogICAgaWYoIWNhc2VJZCB8fCAwID09PSBjYXNlSWQubGVuZ3RoKXsKICAgICAgICB2YXIgY2FzZVJlY29yZFR5cGUgPSAkKCdbbmFtZT0iWF9DYXNlX1JlY29yZF9UeXBlX19jIl0nKTsgLy9LUFMxNzEwMjMgYWRkaW5nIHJlY29yZCB0eXBlIHZhbGlkYXRpb24KICAgICAgICAKICAgIGlmKCJQT0EiICE9IGRvY1R5cGUgJiYgKCFjYXNlUmVjb3JkVHlwZS52YWwoKSB8fCAwID09PSBjYXNlUmVjb3JkVHlwZS52YWwoKS5sZW5ndGggfHwgIkRPTk9UX1NBVkUiID09PSBjYXNlUmVjb3JkVHlwZS52YWwoKSkpewogICAgICAgICAgICBjYXNlUmVjb3JkVHlwZS5jc3MoJ2JvcmRlcicsJzNweCBzb2xpZCByZWQnKTsKICAgICAgICAgICAgcmVxQnVmZmVyICs9ICIsQ2FzZSBSZWNvcmQgVHlwZSI7CiAgICAgICAgfWVsc2UgY2FzZVJlY29yZFR5cGUuY3NzKCdib3JkZXInLCczcHggc29saWQgZ3JlZW4nKTsKCiAgICB9CgogICAgdmFyIHBhdHRlcm5OdW0gPSAvXlswLTldKyQvOwogICAgLy92YWxpZGF0ZSBOUEksIGlmIE5QSSBub3QgZW1wdHkgdGhlbiBpdCBzaG91bGQgYmUgMTAgZGlnaXQgbnVtYXJpYwogICAgdmFyIG5waT0kKCdbbmFtZT0iWF9aUEFQRVJfX05QSV9fYyJdJyk7CiAgICAgICAgaWYgKG5waS52YWwoKSAmJiAobnBpLnZhbCgpLmxlbmd0aCAhPTEwIHx8ICFucGkudmFsKCkubWF0Y2gocGF0dGVybk51bSkpKSB7CiAgICAgICAgICAgIG5waS5jc3MoJ2JvcmRlcicsJzNweCBzb2xpZCByZWQnKTsKICAgICAgICAgICAgaWYgKHJlcUJ1ZmZlci5sZW5ndGggPiAwKSB7IHJlcUJ1ZmZlciArPSAiLCAiOyB9CiAgICAgICAgICAgIHJlcUJ1ZmZlciArPSAiTlBJIjsKICAgICAgICAgICAgYWxlcnQoIkVSUk9SOiAgJ05QSScgTXVzdCBiZSAxMCBkaWdpdCBudW1hcmljLiIpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfWVsc2UgbnBpLmNzcygnYm9yZGVyJywnM3B4IHNvbGlkIGdyZWVuJyk7CiAgICAvLyBub3RpZnkgdmFsaWRhdGlvbiBlcnJvcnMgaWYgYW55CiAgICBpZiAocmVxQnVmZmVyLmxlbmd0aCA+IDApIHsKICAgICAgICBhbGVydCgiRVJST1I6IFRoZSBmb2xsb3dpbmcgZmllbGRzIGFyZSByZXF1aXJlZDogIiArIHJlcUJ1ZmZlcik7CiAgICAgICAgcmV0dXJuIGZhbHNlOyAgIC8vQ1JOMTcwNzE5IG9uZSBvciBtb3JlIGZpZWxkIGlzIG1pc3NpbmcsIGRvbid0IHNlbmQgdG8gdGhlIHJ1bGVzIGVuZ2luZQogICAgfQogICAgcmV0dXJuIHRydWU7ICAgICAgICAvL0NSTjE3MDcxOSBBbGwgcmVxdWlyZWQgZmllbGRzIGhhdmUgYmVlbiBzdXBwbGllZCwgbGV0IHRoZSBydWxlcyBlbmdpbmUgYmUgbm90aWZpZWQKfQoKcmV0dXJuIGRvVmFsaWRhdGlvbigpOwo=
//--- RULE VALIDATION CODE - END ---

</script>
